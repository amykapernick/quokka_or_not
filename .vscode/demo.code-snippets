{
	"Basic Node Function": {
		"prefix": [
			"step-1",
			"basic",
			"start"
		],
		"body": [
			"require('dotenv').config()",
			"",
			"module.exports = async function (context) {",
			"    const res = context.res,",
			"    MessagingResponse = require('twilio').twiml.MessagingResponse,",
			"    twiml = new MessagingResponse()",
			"    message = twiml.message()",
			"    ",
			"    message.body(`Welcome to Quokkabot!`)",
			"",
			"    res.set('content-type', 'text/xml')",
		  "	res.end(message.toString())",
			"};"
		],
		"description": "Basic Node Function"
	},
	"Add Twiml": {
		"prefix": [
			"step-2",
			"twilio",
			"twiml"
		],
		"body": [
			"require('dotenv').config()",
			"",
			"module.exports = async function (context) {",
			"    const res = context.res,",
			"    qs = require('querystring'),",
			"    MessagingResponse = require('twilio').twiml.MessagingResponse,",
			"    twiml = new MessagingResponse(),",
			"    message = twiml.message(),",
			"    body = qs.parse(context.req.body)",
			"    ",
			"    message.body(",
			"        `Welcome to Quokkabot!\\n",
			"        ${body.MediaUrl0}`",
			"    )",
			"",
			"    res.set('content-type', 'text/xml')",
		  "	res.end(message.toString())",
			"};"
		],
		"description": "Add Twiml"
	},
	"Send to Custom Vision": {
		"prefix": [
			"step-3",
			"custom-vision"
		],
		"body": [
			"require('dotenv').config()",
			"",
			"const quokkaTest = require('../quokka-test'),",
			"customVision = quokkaTest.customVision",
			"",
			"module.exports = async function (context) {",
			"    const res = context.res,",
			"    qs = require('querystring'),",
			"    MessagingResponse = require('twilio').twiml.MessagingResponse,",
			"    twiml = new MessagingResponse(),",
			"    message = twiml.message(),",
			"    body = qs.parse(context.req.body),",
			"    image = body.NumMedia && body.MediaUrl0",
			"",
			"    const results = await customVision(image)",
			"    ",
			"    message.body(",
			"        `Welcome to Quokkabot!`",
			"    )",
			"",
			"    res.set('content-type', 'text/xml')",
		  "	res.end(message.toString())",
			"};"
		],
		"description": "Send to Custom Vision"
	},
	"Custom Vision": {
		"prefix": [
			"step-3b",
			"quokka-test-basic",
			"custom-vision"
		],
		"body": [
			"require('dotenv').config()",
			"",
			"const fs = require('fs'),",
			"PredictionApi = require('@azure/cognitiveservices-customvision-prediction'),",
			"key = process.env.API_KEY,",
			"endpoint = process.env.ENDPOINT,",
			"projectId = process.env.PROJECT_ID,",
			"publishIterationName = process.env.ITERATION,",
			"predictor = new PredictionApi.PredictionAPIClient(key, endpoint)",
			"",
			"const customVision = async (image) => {",
		  "	return (results = await predictor.classifyImageUrl(projectId, publishIterationName, { url: image })) ",
			"}",
			"",
			"module.exports = {",
		  "	customVision",
			"}"
		],
		"description": "Custom Vision"
	},
	"Format results": {
		"prefix": [
			"step-4",
			"format"
		],
		"body": [
			"require('dotenv').config()",
			"",
			"const quokkaTest = require('../quokka-test'),",
			"customVision = quokkaTest.customVision",
			"",
			"const whatsappReply = (outcome) => {",
			"    let message,",
			"    quokka = `${(outcome[1] * 100).toFixed(2)}%`,",
			"        notQuokka = `${(outcome[0] * 100).toFixed(2)}%`",
			"        ",
			"    if (outcome[0] > outcome[1]) {",
			"        message = `Sorry, doesn't look like that's a quokka ðŸ˜¢",
			"        \\nQuokka: ${quokka}, Not Quokka: ${notQuokka}`",
			"    } else {",
			"        message = `Yep, that looks like a quokka!",
			"        \\nQuokka: ${quokka}, Not Quokka: ${notQuokka}`",
			"    }",
			"",
			"    return message",
			"}",
			"",
			"module.exports = async function (context) {",
			"    const res = context.res,",
			"    qs = require('querystring'),",
			"    MessagingResponse = require('twilio').twiml.MessagingResponse,",
			"    twiml = new MessagingResponse(),",
			"    message = twiml.message(),",
			"    body = qs.parse(context.req.body),",
			"    image = body.NumMedia && body.MediaUrl0",
			"",
			"    const results = await customVision(image),",
			"    reply = whatsappReply(results)",
			"    ",
			"    message.body(reply)",
			"",
			"    res.set('content-type', 'text/xml')",
		  "	res.end(message.toString())",
			"};"
		],
		"description": "Format results"
	},
	"Format Quokka Test Results": {
		"prefix": [
			"step-4b",
			"format",
			"results"
		],
		"body": [
			"require('dotenv').config()",
			"",
			"const fs = require('fs'),",
			"PredictionApi = require('@azure/cognitiveservices-customvision-prediction'),",
			"key = process.env.API_KEY,",
			"endpoint = process.env.ENDPOINT,",
			"projectId = process.env.PROJECT_ID,",
			"publishIterationName = process.env.ITERATION,",
			"predictor = new PredictionApi.PredictionAPIClient(key, endpoint)",
			"",
			"const customVision = async (image) => {",
		  "	const results = await predictor.classifyImageUrl(projectId, publishIterationName, { url: image }),",
		  "	outcome = quokkaTest(results)",
			"",
		  "	return outcome",
			"}",
			"",
			"const quokkaTest = (results) => {",
		  "	let outcome = []",
			"",
		  "	results.predictions.forEach(tag => {",
		  "		if (tag.tagName == 'Negative') {",
		  "			outcome[0] = tag.probability",
		  "		} else if (tag.tagName == 'Quokka') {",
		  "			outcome[1] = tag.probability",
		  "		}",
		  "	})",
			"",
		  "	return outcome",
			"}",
			"",
			"module.exports = {",
		  "	customVision",
			"}"
		],
		"description": "Format Quokka Test Results"
	},
	"Add Quokkabot": {
		"prefix": [
			"step-5",
			"quokkabot",
			"final"
		],
		"body": [
			"require('dotenv').config()",
			"",
			"const quokkaTest = require('../quokka-test'),",
			"customVision = quokkaTest.customVision,",
			"quokkaBot = require('../quokkabot')",
			"",
			"const whatsappReply = (outcome) => {",
			"    let message,",
			"    photo = Math.floor(Math.random() * 12),",
			"    quokka = `${(outcome[1] * 100).toFixed(2)}%`,",
			"        notQuokka = `${(outcome[0] * 100).toFixed(2)}%`",
			"        ",
			"    if (outcome[0] > outcome[1]) {",
			"        message = `Sorry, doesn't look like that's a quokka ðŸ˜¢",
			"        \\nQuokka: ${quokka}, Not Quokka: ${notQuokka}",
			"        \\nThat's pretty sad though, so here's a quokka`",
			"    } else {",
			"        message = `Yep, that looks like a quokka!",
			"        \\nQuokka: ${quokka}, Not Quokka: ${notQuokka}`",
			"    }",
			"",
			"    return {message: message, photo: photo}",
			"}",
			"",
			"module.exports = async function (context) {",
			"    const res = context.res,",
			"    qs = require('querystring'),",
			"    MessagingResponse = require('twilio').twiml.MessagingResponse,",
			"    twiml = new MessagingResponse(),",
			"    message = twiml.message(),",
			"    body = qs.parse(context.req.body),",
			"    text = body.Body,",
			"    image = body.NumMedia && body.MediaUrl0",
			"",
			"    if(image) {",
			"        const results = await customVision(image),",
			"        reply = whatsappReply(results)",
			"        ",
			"        message.body(reply.message)",
			"",
			"        if(reply.photo) {",
			"            message.media(`https://quokkas.amyskapers.dev/img/quokka_(${reply.photo}).jpg`)",
			"        }",
			"    }",
			"    else {",
			"        const results = quokkaBot.message(text)",
			"",
			"        message.body(results.body)",
			"        message.media(results.media)",
			"    }",
			"",
			"    res.set('content-type', 'text/xml')",
		  "	res.end(message.toString())",
			"};"
		],
		"description": "Add Quokkabot"
	},
	"Sendgrid Test": {
		"prefix": "sendgrid",
		"body": [
			"require('dotenv').config()",
			"",
			"const fs = require('fs'),",
			"PredictionApi = require('@azure/cognitiveservices-customvision-prediction'),",
			"key = process.env.API_KEY,",
			"endpoint = process.env.ENDPOINT,",
			"projectId = process.env.PROJECT_ID,",
			"publishIterationName = process.env.ITERATION,",
			"predictor = new PredictionApi.PredictionAPIClient(key, endpoint)",
			"",
			"const customVision = async (image) => {",
		  "	const results = await predictor.classifyImageUrl(projectId, publishIterationName, { url: image }),",
		  "	outcome = quokkaTest(results)",
			"",
		  "	return outcome",
			"}",
			"",
			"const customVisionBinary = async (image) => {",
		  "	const results = await predictor.classifyImage(projectId, publishIterationName, image),",
		  "	outcome = quokkaTest(results)",
			"",
		  "	return outcome",
			"}",
			"",
			"const quokkaTest = (results) => {",
		  "	let outcome = []",
			"",
		  "	results.predictions.forEach(tag => {",
		  "		if (tag.tagName == 'Negative') {",
		  "			outcome[0] = tag.probability",
		  "		} else if (tag.tagName == 'Quokka') {",
		  "			outcome[1] = tag.probability",
		  "		}",
		  "	})",
			"",
		  "	return outcome",
			"}",
			"",
			"module.exports = {",
		  "	customVision,",
		  "	customVisionBinary",
			"}"
		],
		"description": "Sendgrid Test"
	}
}